<h1>Transaction</h1>

<ul class="simpleList">
    <li><span class="dataLabel">Hash:</span> {{txid}}</li>
    <li><span class="dataLabel">Appeared in block:</span> <a href="/blockchain/block/number/{{blocknumber}}">{{blocknumber}}</a> ({{blocktime}})</li>
    <li><span class="dataLabel">Number of inputs:</span> {{inputCount}} (<a href="#input">Jump to inputs</a>)</li>
    <li><span class="dataLabel">Total BTC in:</span> {{totalIn}}</li>
    <li><span class="dataLabel">Number of outputs:</span> {{outputCount}} (<a href="#output">Jump to outputs</a>)</li>
    <li><span class="dataLabel">Total BTC out:</span> {{totalOut}}</li>
    <li><span class="dataLabel">Size:</span> {{size}} bytes</li>
    <li><span class="dataLabel">Fee:</span> {{fee}}</li>
    <li><span class="dataLabel">&nbsp;</span> <a href="/transaction/raw/{{txid}}">Raw transaction</a></li>
</ul>

<style>
#chart {
    height: {{chartHeight}}px;
}

.node rect {
    cursor: move;
    fill-opacity: .9;
    shape-rendering: crispEdges;
}

.node text {
    pointer-events: none;
    text-shadow: 0 1px 0 #fff;
}

.link {
    fill: none;
    stroke: #000;
    stroke-opacity: .2;
}

.link:hover {
    stroke-opacity: .5;
}
</style>

<p id="chart"></p>

<script type="text/javascript">
var margin = {top: 1, right: 1, bottom: 6, left: 1},
width = 960 - margin.left - margin.right,
height = {{chartHeight}} - margin.top - margin.bottom;

var formatNumber = d3.format(",.0f"),
format = function(d) { return formatNumber(d) + " TWh"; },
color = d3.scale.category20();

var svg = d3.select("#chart").append("svg")
.attr("width", width + margin.left + margin.right)
.attr("height", height + margin.top + margin.bottom)
.append("g")
.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var sankey = d3.sankey()
.nodeWidth(15)
.nodePadding(10)
.size([width, height]);

var path = sankey.link();

var btcFlow = {
    'nodes':[
        {{#nodes}}
            {'name':'{{name}}'},
        {{/nodes}}
    ],
    'links':[
        {{#links}}
            {'source':{{source}},'target':{{target}},'value':{{value}}},
        {{/links}}
    ]
}

sankey
.nodes(btcFlow.nodes)
.links(btcFlow.links)
.layout(32);

var link = svg.append("g").selectAll(".link")
.data(btcFlow.links)
.enter().append("path")
.attr("class", "link")
.attr("d", path)
.style("stroke-width", function(d) { return Math.max(1, d.dy); })
.sort(function(a, b) { return b.dy - a.dy; });

link.append("title")
.text(function(d) { return d.source.name + " â†’ " + d.target.name + "\n" + format(d.value); });

var node = svg.append("g").selectAll(".node")
.data(btcFlow.nodes)
.enter().append("g")
.attr("class", "node")
.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
.call(d3.behavior.drag()
.origin(function(d) { return d; })
.on("dragstart", function() { this.parentNode.appendChild(this); })
.on("drag", dragmove));

node.append("rect")
.attr("height", function(d) { return d.dy; })
.attr("width", sankey.nodeWidth())
.style("fill", function(d) { return d.color = color(d.name.replace(/ .*/, "")); })
.style("stroke", function(d) { return d3.rgb(d.color).darker(2); })
.append("title")
.text(function(d) { return d.name + "\n" + format(d.value); });

node.append("text")
.attr("x", -6)
.attr("y", function(d) { return d.dy / 2; })
.attr("dy", ".35em")
.attr("text-anchor", "end")
.attr("transform", null)
.text(function(d) { return d.name; })
.filter(function(d) { return d.x < width / 2; })
.attr("x", 6 + sankey.nodeWidth())
.attr("text-anchor", "start");

function dragmove(d) {
    d3.select(this).attr("transform", "translate(" + d.x + "," + (d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))) + ")");
    sankey.relayout();
    link.attr("d", path);
}
</script>

<a name="input"></a>
<h2>Inputs</h2>
<div class="inputlistRow header">
    <div class="prev firstCol">Previous output (index)</div>
    <div class="amount">Amount</div>
    <div class="from">From address</div>
    <div class="type">Type</div>
    <div class="scriptSig">ScriptSig</div>
</div>
<div class="rowEnd"></div>
{{#inputs}}
<div class="inputlistRow">
    {{#isCoinbase}}
        <div class="prev firstCol">N/A</a></div>
    {{/isCoinbase}}
    {{^isCoinbase}}
        <div class="prev firstCol"><a href="/blockchain/transaction/{{previousTxid}}#o{{vout}}">{{previousTxidTruncated}} ({{vout}})</a></div>
    {{/isCoinbase}}
    <div class="amount">{{amount}}</div>
    {{#isCoinbase}}
        <div class="from">N/A</div>
    {{/isCoinbase}}
    {{^isCoinbase}}
        <div class="from"><a href="/blockchain/address/{{fromAddress}}">{{fromAddress}}</a></div>
    {{/isCoinbase}}
    <div class="type">{{type}}</div>
    <div class="scriptSig">{{scriptSig}}</div>
</div>
<div class="rowEnd"></div>
{{/inputs}}

<a name="output"></a>
<h2>Outputs</h2>
<div class="outputlistRow header">
    <div class="index firstCol">Index</div>
    <div class="redeemedAt">Reedemed at input</div>
    <div class="amount">Amount</div>
    <div class="to">To address</div>
    <div class="type">Type</div>
    <div class="scriptPubKey">ScriptPubKey</div>
</div>
<div class="rowEnd"></div>
{{#outputs}}
<div class="outputlistRow">
    <div class="index firstCol">{{index}}</div>
    {{#redeemedAt}}
        <div class="redeemedAt"><a href="/blockchain/transaction/{{redeemedAt}}">{{redeemedAtTruncated}}</a></div>
    {{/redeemedAt}}
    {{^redeemedAt}}
        <div class="redeemedAt">Not yet redeemed</div>
    {{/redeemedAt}}
    <div class="amount">{{amount}}</div>
    <div class="to"><a href="/blockchain/address/{{address}}">{{address}}</a></div>
    <div class="type">{{type}}&nbsp;</div>
    <div class="scriptPubKey">{{scriptPubKey}}</div>
</div>
<div class="rowEnd"></div>
{{/outputs}}

